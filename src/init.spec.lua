return function ()
	describe("Interface", function()
		it("should boot", function()
			local Interface = require(script.Parent)
			expect(Interface).to.be.ok()
		end)
		it("should return mount", function()
			local Interface = require(script.Parent)
			expect(Interface.mount).never.to.equal(nil)
		end)
		it("should return new", function()
			local Interface = require(script.Parent)
			expect(Interface.new).never.to.equal(nil)
		end)
		it("should return construct", function()
			local Interface = require(script.Parent)
			expect(Interface.construct).never.to.equal(nil)
		end)
		it("should return Value", function()
			local Interface = require(script.Parent)
			expect(Interface.Value).never.to.equal(nil)
		end)
		it("should return Attribute", function()
			local Interface = require(script.Parent)
			expect(Interface.Attribute).never.to.equal(nil)
		end)
		it("should return Signal", function()
			local Interface = require(script.Parent)
			expect(Interface.Signal).never.to.equal(nil)
		end)
		it("should return Property", function()
			local Interface = require(script.Parent)
			expect(Interface.Property).never.to.equal(nil)
		end)
		it("should return Computed", function()
			local Interface = require(script.Parent)
			expect(Interface.Computed).never.to.equal(nil)
		end)
		it("should return State", function()
			local Interface = require(script.Parent)
			expect(Interface.State).never.to.equal(nil)
		end)
		it("should return Event", function()
			local Interface = require(script.Parent)
			expect(Interface.Event).never.to.equal(nil)
		end)
		it("should return OnChanged", function()
			local Interface = require(script.Parent)
			expect(Interface.OnChanged).never.to.equal(nil)
		end)
		it("should return Children", function()
			local Interface = require(script.Parent)
			expect(Interface.Children).never.to.equal(nil)
		end)
	end)
	describe("Abstract", function()
		it("should boot", function()
			local Abstract = require(script.Parent.State.Abstract)
			expect(Abstract).to.be.ok()
		end)
	end)
	describe("Value", function()
		it("should boot", function()
			local Value = require(script.Parent.State.Value)
			expect(Value).to.be.ok()
		end)
		it("should get", function()
			local Value = require(script.Parent.State.Value)
			local health = Value(100)
			expect(health:Get()).to.equal(100)
			health:Destroy()
		end)
		it("should set", function()
			local Value = require(script.Parent.State.Value)
			local health = Value(100)
			health:Set(50)
			expect(health:Get()).to.equal(50)
			health:Destroy()
		end)
		it("should deep get", function()
			local Value = require(script.Parent.State.Value)
			local health = Value(100)
			local innerHealth = Value(50)
			health:Set(innerHealth)
			expect(health:DeepGet()).to.equal(50)
			innerHealth:Destroy()
			health:Destroy()
		end)
	end)
	describe("Attribute", function()
		it("should boot", function()
			local Attribute = require(script.Parent.State.Attribute)
			expect(Attribute).to.be.ok()
		end)
		it("should get attribute from instance", function()
			local attrName = "Test"
			local inst = Instance.new("Part")
			inst:SetAttribute(attrName, true)
			
			local Attribute = require(script.Parent.State.Attribute)
			local newAttribute = Attribute(inst, attrName)
			expect(newAttribute:Get()).to.equal(true)

			inst:Destroy()
			newAttribute:Destroy()
		end)
		it("should get changed attribute from instance", function()
			local attrName = "Test"
			local inst = Instance.new("Part")
			inst:SetAttribute(attrName, true)
			
			local Attribute = require(script.Parent.State.Attribute)
			local newAttribute = Attribute(inst, attrName)
			inst:SetAttribute(attrName, false)
			expect(newAttribute:Get()).to.equal(false)

			inst:Destroy()
			newAttribute:Destroy()
		end)
		it("should get attribute from state wrapped instance", function()
			local attrName = "Test"
			local inst = Instance.new("Part")
			inst:SetAttribute(attrName, true)
			local Value = require(script.Parent.State.Value)
			local fusionState = Value(inst)
			local Attribute = require(script.Parent.State.Attribute)
			local newAttribute = Attribute(fusionState, attrName)
			expect(newAttribute:Get()).to.equal(true)
			inst:Destroy()
			fusionState:Destroy()
			newAttribute:Destroy()
		end)
		it("should get changed attribute from state wrapped instance", function()
			local attrName = "Test"
			local inst = Instance.new("Part")
			inst:SetAttribute(attrName, true)
			local Value = require(script.Parent.State.Value)
			local fusionState = Value(inst)
			local Attribute = require(script.Parent.State.Attribute)
			local newAttribute = Attribute(fusionState, attrName)
			inst:SetAttribute(attrName, false)
			expect(newAttribute:Get()).to.equal(false)
			inst:Destroy()
			fusionState:Destroy()
			newAttribute:Destroy()
		end)
	end)
	describe("Computed", function()
		it("should boot", function()
			local Computed = require(script.Parent.State.Computed)
			expect(Computed).to.be.ok()
		end)
		it("should get", function()
			local Computed = require(script.Parent.State.Computed)
			local health = Computed(function()
				return 100
			end)
			expect(health:Get()).to.equal(100)
			health:Destroy()
		end)
		it("should take parameters", function()
			local Value = require(script.Parent.State.Value)
			local Computed = require(script.Parent.State.Computed)
			local health = Value(100)
			local alphaHealth = Computed(health, function(h)
				return h/100
			end)
			expect(alphaHealth:Get()).to.equal(1)
			health:Destroy()
		end)
		it("should update after parameters", function()
			local Value = require(script.Parent.State.Value)
			local Computed = require(script.Parent.State.Computed)
			local health = Value(100)
			local alphaHealth = Computed(health, function(h)
				return h/100
			end)
			health:Set(50)
			expect(alphaHealth:Get()).to.equal(0.5)
			health:Destroy()
		end)
	end)
	describe("Property", function()
		it("should boot", function()
			local Property = require(script.Parent.State.Property)
			expect(Property).to.be.ok()
		end)
		it("should get property from instance", function()
			local propValue = "Test"
			local inst = Instance.new("Part")
			inst.Name = propValue

			local Property = require(script.Parent.State.Property)
			local newProp = Property(inst, "Name")
			expect(newProp:Get()).to.equal(propValue)

			inst:Destroy()
			newProp:Destroy()
		end)
		it("should get changed property from instance", function()
			local propValue = "Test"
			local inst = Instance.new("Part")
			inst.Name = propValue

			local Property = require(script.Parent.State.Property)
			local newProp = Property(inst, "Name")
			inst.Name = "Potato"
			expect(newProp:Get()).to.equal("Potato")

			inst:Destroy()
			newProp:Destroy()
		end)
		it("should get stepped property from instance", function()
			local propValue = "Test"
			local inst = Instance.new("Part")
			inst.Name = propValue

			local Property = require(script.Parent.State.Property)
			local newProp = Property(inst, "Name", 120)
			inst.Name = "Potato"
			task.wait(0.2)
			expect(newProp:Get()).to.equal("Potato")

			inst:Destroy()
			newProp:Destroy()
		end)
		it("should get property from state wrapped instance", function()
			local propValue = "Test"
			local inst = Instance.new("Part")
			inst.Name = propValue
			local Value = require(script.Parent.State.Value)
			local instValue = Value(inst)
			local Property = require(script.Parent.State.Property)
			local newProp = Property(instValue, "Name")
			expect(newProp:Get()).to.equal(propValue)

			inst:Destroy()
			instValue:Destroy()
			newProp:Destroy()
		end)
		it("should get changed property from state wrapped instance", function()
			local propValue = "Test"
			local inst = Instance.new("Part")
			inst.Name = propValue
			local Value = require(script.Parent.State.Value)
			local instValue = Value(inst)
			local Property = require(script.Parent.State.Property)
			local newProp = Property(instValue, "Name")
			inst.Name = "Potato"
			expect(newProp:Get()).to.equal("Potato")
			inst:Destroy()
			instValue:Destroy()
			newProp:Destroy()
		end)
		it("should get stepped property from state wrapped instance", function()
			local propValue = "Test"
			local inst = Instance.new("Part")
			inst.Name = propValue
			local Value = require(script.Parent.State.Value)
			local instValue = Value(inst)
			local Property = require(script.Parent.State.Property)
			local newProp = Property(instValue, "Name", 120)
			inst.Name = "Potato"
			task.wait(0.2)
			expect(newProp:Get()).to.equal("Potato")
			inst:Destroy()
			instValue:Destroy()
			newProp:Destroy()
		end)
	end)
	describe("Signal", function()
		it("should boot", function()
			local Signal = require(script.Parent.State.Signal)
			expect(Signal).to.be.ok()
		end)
		it("should get initial value", function()
			local Signal = require(script.Parent.State.Signal)
			local RunService = game:GetService("RunService")
			local stepSignal = Signal(RunService.Heartbeat, 1)
			expect(stepSignal:Get()).to.equal(1)
			stepSignal:Destroy()
		end)
		it("should get updated value", function()
			local Signal = require(script.Parent.State.Signal)
			local RunService = game:GetService("RunService")
			local stepSignal = Signal(RunService.Heartbeat, 1)
			task.wait(0.2)
			expect(stepSignal:Get()).never.to.equal(nil)
			expect(stepSignal:Get()).never.to.equal(1)
			stepSignal:Destroy()
		end)
		it("should get initial value when using state", function()
			local Signal = require(script.Parent.State.Signal)
			local Value = require(script.Parent.State.Value)
			local RunService = game:GetService("RunService")
			local eventState = Value(RunService.Heartbeat)
			local stepSignal = Signal(eventState, 1)
			task.wait(0.2)
			expect(stepSignal:Get()).never.to.equal(1)
			eventState:Destroy()
			stepSignal:Destroy()
		end)
		it("should get updated value when using state", function()
			local Signal = require(script.Parent.State.Signal)
			local Value = require(script.Parent.State.Value)
			local RunService = game:GetService("RunService")
			local eventState = Value(RunService.Stepped)
			local stepSignal = Signal(eventState, 1)
			eventState:Set(RunService.Heartbeat)
			task.wait(0.2)
			expect(stepSignal:Get()).never.to.equal(1)
			eventState:Destroy()
			stepSignal:Destroy()
		end)
	end)
	
end